image: docker:latest
services:
  - docker:dind
stages:
  - test
  - build
  - deploy
  - release

variables:
  REMOTE_USER: "ubrato"
  REMOTE_HOST: "194.58.96.228"
  REMOTE_PORT: "2022"
  REMOTE_PATH: "/home/ubrato/ubrato"

lint:
  image: python:3.11.6-slim-bullseye
  stage: test
  script:
    - pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -vv
    - poetry run mypy app/
    - pip install ruff 
    - ruff check --output-format=gitlab app/

test:
  image: python:3.11.6-slim-bullseye
  stage: test
  services:
  - docker:dind
  - name: postgres:latest
    alias: postgres
  variables:
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "12345"
    POSTGRES_DB: "test"
    POSTGRES_ADDR: "postgres"
  before_script:
    - apt-get update
    - apt-get install -y postgresql postgresql-client libpq-dev
    - cd ~/work/ubrato-back/app/repositories/migration
    - for file in *up.sql; do psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f "$file"; done
  script: 
    - pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -vv
    - poetry run pytest

prod-build:
  only: [main]
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --build-arg GIT_VERSION=$CI_COMMIT_SHORT_SHA --pull -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"

tags-release-build:
  only: [tags]
  stage: release
  script:
    - docker login -u $CI_REGISTRY_USER -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --build-arg GIT_VERSION=$CI_COMMIT_SHORT_SHA --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

prod-deploy:
  only: [main]
  stage: deploy
  before_script:
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - chmod 400 "$SSH_PRIVATE_KEY"
  - ssh-add "$SSH_PRIVATE_KEY"
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - cp $KNOWN_HOSTS ~/.ssh/known_hosts
  script:
    - ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST -p $REMOTE_PORT "cd $REMOTE_PATH &&
      ./update-back.sh"